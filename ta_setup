#!/bin/bash

# Function to set up SEV image and customize it
setup_image() {
  echo "[+] Setting up SEV image..."
  
  # Check if the image file already exists
  if [ ! -f "jammy-server-cloudimg-amd64.img" ]; then
    echo "[!] Image file not found, downloading..."
    wget -nc https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.img
    if [ $? -ne 0 ]; then
      echo "[!] Failed to download the image!"
      exit 1
    fi
  else
    echo "[+] Image file already exists, skipping download."
  fi
  
  echo "[+] Converting image to QCOW2 format..."
  qemu-img convert -O qcow2 jammy-server-cloudimg-amd64.img ubuntu-sev.qcow2
  if [ $? -ne 0 ]; then
    echo "[!] Failed to convert the image!"
    exit 1
  fi

  echo "[+] Customizing SSH settings..."
  sudo virt-customize -a ubuntu-sev.qcow2 --run-command "sed -i 's|[#]*PasswordAuthentication .*|PasswordAuthentication yes|g' /etc/ssh/sshd_config"
  sudo virt-customize -a ubuntu-sev.qcow2 --run-command "sed -i 's|[#]*PermitRootLogin .*|PermitRootLogin yes|g' /etc/ssh/sshd_config"
  sudo virt-customize -a ubuntu-sev.qcow2 --run-command "sed -i 's|[#]*KbdInteractiveAuthentication .*|KbdInteractiveAuthentication yes|g' /etc/ssh/sshd_config"
}

# Function to upload files to the SEV image
upload_files() {
  if [ $# -lt 2 ]; then
    echo "[!] Usage: $0 upload <file> <path>"
    exit 1
  fi
  local file="$1"
  local path="$2"
  
  # Check if the file exists before uploading
  if [ ! -f "$file" ]; then
    echo "[!] File '$file' does not exist!"
    exit 1
  fi
  
  echo "[+] Uploading file '$file' to '$path' in the SEV image..."
  sudo virt-customize -a ubuntu-sev.qcow2 --upload "$file":"$path"
  if [ $? -ne 0 ]; then
    echo "[!] Failed to upload the file!"
    exit 1
  fi
}

# Function to run the SEV setup (run QEMU)
run_sev() {
  echo "[+] Running SEV VM..."

  # Check if the SEV image exists
  if [ ! -f "ubuntu-sev.qcow2" ]; then
    echo "[!] SEV image not found. Please run the setup_image step first!"
    exit 1
  fi
  
  export XDG_RUNTIME_DIR=/run/user/$(id -u)
  SEV_IMG="${PWD}/ubuntu-sev.qcow2"
  SEV_FIRMWARE="/usr/share/ovmf/OVMF.fd"
  SSH_PORT=10022
  VSOCK_GUEST_CID=3

  cleanup() {
    rm -f /tmp/sev-guest-*.log &> /dev/null
    PID_SEV=$(cat /tmp/sev-demo-pid.pid 2>/dev/null)
    [ ! -z "$PID_SEV" ] && kill -TERM $PID_SEV
  }
  cleanup

  echo "[+] Starting QEMU with SEV..."
  sudo qemu-system-x86_64 \
    -accel kvm \
    -machine q35,confidential-guest-support=sev0,memory-backend=ram1 \
    -object memory-backend-ram,id=ram1,size=2G,share=on \
    -object sev-guest,id=sev0,cbitpos=47,reduced-phys-bits=1,policy=0x03 \
    -machine memory-encryption=sev0 \
    -cpu EPYC \
    -m 2G \
    -smp 16 \
    -bios "$SEV_FIRMWARE" \
    -drive file="$SEV_IMG",format=qcow2,if=virtio \
    -device virtio-net-pci,netdev=nic0_sev \
    -netdev user,id=nic0_sev,hostfwd=tcp::${SSH_PORT}-:22 \
    -device vhost-vsock-pci,guest-cid=$VSOCK_GUEST_CID \
    -daemonize \
    -display none
  
  if [ $? -ne 0 ]; then
    echo "[!] Failed to start QEMU!"
    exit 1
  fi
}

# Function to build the required binaries
build_binaries() {
  echo "[+] Building binaries..."
  
  if [ ! -f "ta_server.c" ]; then
    echo "[!] 'ta_server.c' file not found!"
    exit 1
  fi
  
  gcc ta_server.c -o ta_server
  if [ $? -ne 0 ]; then
    echo "[!] Failed to compile ta_server.c!"
    exit 1
  fi
  
  gcc ta.c -o ta -lm
  if [ $? -ne 0 ]; then
    echo "[!] Failed to compile ta.c!"
    exit 1
  fi
}

# Execute all steps in order if no argument is provided
if [ $# -eq 0 ]; then
  echo "[+] No arguments provided. Running all steps..."
  build_binaries
  setup_image
  upload_files "${PWD}/ta" "/root"
  run_sev
else
  case "$1" in
    image)
      setup_image
      ;;
    upload)
      if [ $# -lt 3 ]; then
        echo "[!] Usage: $0 upload <file> <path>"
        exit 1
      fi
      upload_files "$2" "$3"
      ;;
    run)
      run_sev
      ;;
    build)
      build_binaries
      ;;
    *)
      echo "[!] Invalid argument. Usage: $0 {image|upload|run|build} or no argument to execute all"
      exit 1
      ;;
  esac
fi

