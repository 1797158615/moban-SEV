/*
 * File automatically generated by
 * gengen 1.4.2 by Lorenzo Bettini 
 * http://www.gnu.org/software/gengen
 */

#ifndef TD_SETUP_GEN_CLASS_H
#define TD_SETUP_GEN_CLASS_H

#include <string>
#include <iostream>

using std::string;
using std::ostream;

class td_setup_gen_class
{
 protected:
  string taname;

 public:
  td_setup_gen_class()
  {
  }
  
  td_setup_gen_class(const string &_taname) :
    taname (_taname)
  {
  }

  void set_taname(const string &_taname)
  {
    taname = _taname;
  }

  void generate_td_setup(ostream &stream, unsigned int indent = 0)
  {
    string indent_str (indent, ' ');
    indent = 0;
  
    stream << "#!/bin/bash";
    stream << "\n";
    stream << indent_str;
    stream << "\n";
    stream << indent_str;
    stream << "# Function to set up SEV image and customize it";
    stream << "\n";
    stream << indent_str;
    stream << "setup_image() {";
    stream << "\n";
    stream << indent_str;
    stream << "  echo \"[+] Setting up SEV image...\"";
    stream << "\n";
    stream << indent_str;
    indent = 2;
    stream << "  ";
    indent = 0;
    stream << "\n";
    stream << indent_str;
    stream << "  # Check if the image file already exists";
    stream << "\n";
    stream << indent_str;
    stream << "  if [ ! -f \"jammy-server-cloudimg-amd64.img\" ]; then";
    stream << "\n";
    stream << indent_str;
    stream << "    echo \"[!] Image file not found, downloading...\"";
    stream << "\n";
    stream << indent_str;
    stream << "    wget -nc https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.img";
    stream << "\n";
    stream << indent_str;
    stream << "    if [ $? -ne 0 ]; then";
    stream << "\n";
    stream << indent_str;
    stream << "      echo \"[!] Failed to download the image!\"";
    stream << "\n";
    stream << indent_str;
    stream << "      exit 1";
    stream << "\n";
    stream << indent_str;
    stream << "    fi";
    stream << "\n";
    stream << indent_str;
    stream << "  else";
    stream << "\n";
    stream << indent_str;
    stream << "    echo \"[+] Image file already exists, skipping download.\"";
    stream << "\n";
    stream << indent_str;
    stream << "  fi";
    stream << "\n";
    stream << indent_str;
    indent = 2;
    stream << "  ";
    indent = 0;
    stream << "\n";
    stream << indent_str;
    stream << "  echo \"[+] Converting image to QCOW2 format...\"";
    stream << "\n";
    stream << indent_str;
    stream << "  qemu-img convert -O qcow2 jammy-server-cloudimg-amd64.img ubuntu-sev.qcow2";
    stream << "\n";
    stream << indent_str;
    stream << "  if [ $? -ne 0 ]; then";
    stream << "\n";
    stream << indent_str;
    stream << "    echo \"[!] Failed to convert the image!\"";
    stream << "\n";
    stream << indent_str;
    stream << "    exit 1";
    stream << "\n";
    stream << indent_str;
    stream << "  fi";
    stream << "\n";
    stream << indent_str;
    stream << "\n";
    stream << indent_str;
    stream << "  echo \"[+] Customizing SSH settings...\"";
    stream << "\n";
    stream << indent_str;
    stream << "  sudo virt-customize -a ubuntu-sev.qcow2 --run-command \"sed -i 's|[#]*PasswordAuthentication .*|PasswordAuthentication yes|g' /etc/ssh/sshd_config\"";
    stream << "\n";
    stream << indent_str;
    stream << "  sudo virt-customize -a ubuntu-sev.qcow2 --run-command \"sed -i 's|[#]*PermitRootLogin .*|PermitRootLogin yes|g' /etc/ssh/sshd_config\"";
    stream << "\n";
    stream << indent_str;
    stream << "  sudo virt-customize -a ubuntu-sev.qcow2 --run-command \"sed -i 's|[#]*KbdInteractiveAuthentication .*|KbdInteractiveAuthentication yes|g' /etc/ssh/sshd_config\"";
    stream << "\n";
    stream << indent_str;
    stream << "}";
    stream << "\n";
    stream << indent_str;
    stream << "\n";
    stream << indent_str;
    stream << "# Function to upload files to the SEV image";
    stream << "\n";
    stream << indent_str;
    stream << "upload_files() {";
    stream << "\n";
    stream << indent_str;
    stream << "  if [ $# -lt 2 ]; then";
    stream << "\n";
    stream << indent_str;
    stream << "    echo \"[!] Usage: $0 upload <file> <path>\"";
    stream << "\n";
    stream << indent_str;
    stream << "    exit 1";
    stream << "\n";
    stream << indent_str;
    stream << "  fi";
    stream << "\n";
    stream << indent_str;
    stream << "  local file=\"$1\"";
    stream << "\n";
    stream << indent_str;
    stream << "  local path=\"$2\"";
    stream << "\n";
    stream << indent_str;
    indent = 2;
    stream << "  ";
    indent = 0;
    stream << "\n";
    stream << indent_str;
    stream << "  # Check if the file exists before uploading";
    stream << "\n";
    stream << indent_str;
    stream << "  if [ ! -f \"$file\" ]; then";
    stream << "\n";
    stream << indent_str;
    stream << "    echo \"[!] File '$file' does not exist!\"";
    stream << "\n";
    stream << indent_str;
    stream << "    exit 1";
    stream << "\n";
    stream << indent_str;
    stream << "  fi";
    stream << "\n";
    stream << indent_str;
    indent = 2;
    stream << "  ";
    indent = 0;
    stream << "\n";
    stream << indent_str;
    stream << "  echo \"[+] Uploading file '$file' to '$path' in the SEV image...\"";
    stream << "\n";
    stream << indent_str;
    stream << "  sudo virt-customize -a ubuntu-sev.qcow2 --upload \"$file\":\"$path\"";
    stream << "\n";
    stream << indent_str;
    stream << "  if [ $? -ne 0 ]; then";
    stream << "\n";
    stream << indent_str;
    stream << "    echo \"[!] Failed to upload the file!\"";
    stream << "\n";
    stream << indent_str;
    stream << "    exit 1";
    stream << "\n";
    stream << indent_str;
    stream << "  fi";
    stream << "\n";
    stream << indent_str;
    stream << "}";
    stream << "\n";
    stream << indent_str;
    stream << "\n";
    stream << indent_str;
    stream << "# Function to run the SEV setup (run QEMU)";
    stream << "\n";
    stream << indent_str;
    stream << "run_sev() {";
    stream << "\n";
    stream << indent_str;
    stream << "  echo \"[+] Running SEV VM...\"";
    stream << "\n";
    stream << indent_str;
    stream << "\n";
    stream << indent_str;
    stream << "  # Check if the SEV image exists";
    stream << "\n";
    stream << indent_str;
    stream << "  if [ ! -f \"ubuntu-sev.qcow2\" ]; then";
    stream << "\n";
    stream << indent_str;
    stream << "    echo \"[!] SEV image not found. Please run the setup_image step first!\"";
    stream << "\n";
    stream << indent_str;
    stream << "    exit 1";
    stream << "\n";
    stream << indent_str;
    stream << "  fi";
    stream << "\n";
    stream << indent_str;
    indent = 2;
    stream << "  ";
    indent = 0;
    stream << "\n";
    stream << indent_str;
    stream << "  export XDG_RUNTIME_DIR=/run/user/$(id -u)";
    stream << "\n";
    stream << indent_str;
    stream << "  SEV_IMG=\"${PWD}/ubuntu-sev.qcow2\"";
    stream << "\n";
    stream << indent_str;
    stream << "  SEV_FIRMWARE=\"/usr/share/ovmf/OVMF.fd\"";
    stream << "\n";
    stream << indent_str;
    stream << "  SSH_PORT=10022";
    stream << "\n";
    stream << indent_str;
    stream << "  VSOCK_GUEST_CID=3";
    stream << "\n";
    stream << indent_str;
    stream << "\n";
    stream << indent_str;
    stream << "  cleanup() {";
    stream << "\n";
    stream << indent_str;
    stream << "    rm -f /tmp/sev-guest-*.log &> /dev/null";
    stream << "\n";
    stream << indent_str;
    stream << "    PID_SEV=$(cat /tmp/sev-demo-pid.pid 2>/dev/null)";
    stream << "\n";
    stream << indent_str;
    stream << "    [ ! -z \"$PID_SEV\" ] && kill -TERM $PID_SEV";
    stream << "\n";
    stream << indent_str;
    stream << "  }";
    stream << "\n";
    stream << indent_str;
    stream << "  cleanup";
    stream << "\n";
    stream << indent_str;
    stream << "\n";
    stream << indent_str;
    stream << "  echo \"[+] Starting QEMU with SEV...\"";
    stream << "\n";
    stream << indent_str;
    stream << "  sudo qemu-system-x86_64 \\";
    stream << "\n";
    stream << indent_str;
    stream << "    -accel kvm \\";
    stream << "\n";
    stream << indent_str;
    stream << "    -machine q35,confidential-guest-support=sev0,memory-backend=ram1 \\";
    stream << "\n";
    stream << indent_str;
    stream << "    -object memory-backend-ram,id=ram1,size=2G,share=on \\";
    stream << "\n";
    stream << indent_str;
    stream << "    -object sev-guest,id=sev0,cbitpos=47,reduced-phys-bits=1,policy=0x03 \\";
    stream << "\n";
    stream << indent_str;
    stream << "    -machine memory-encryption=sev0 \\";
    stream << "\n";
    stream << indent_str;
    stream << "    -cpu EPYC \\";
    stream << "\n";
    stream << indent_str;
    stream << "    -m 2G \\";
    stream << "\n";
    stream << indent_str;
    stream << "    -smp 16 \\";
    stream << "\n";
    stream << indent_str;
    stream << "    -bios \"$SEV_FIRMWARE\" \\";
    stream << "\n";
    stream << indent_str;
    stream << "    -drive file=\"$SEV_IMG\",format=qcow2,if=virtio \\";
    stream << "\n";
    stream << indent_str;
    stream << "    -device virtio-net-pci,netdev=nic0_sev \\";
    stream << "\n";
    stream << indent_str;
    stream << "    -netdev user,id=nic0_sev,hostfwd=tcp::${SSH_PORT}-:22 \\";
    stream << "\n";
    stream << indent_str;
    stream << "    -device vhost-vsock-pci,guest-cid=$VSOCK_GUEST_CID \\";
    stream << "\n";
    stream << indent_str;
    stream << "    -daemonize \\";
    stream << "\n";
    stream << indent_str;
    stream << "    -display none";
    stream << "\n";
    stream << indent_str;
    indent = 2;
    stream << "  ";
    indent = 0;
    stream << "\n";
    stream << indent_str;
    stream << "  if [ $? -ne 0 ]; then";
    stream << "\n";
    stream << indent_str;
    stream << "    echo \"[!] Failed to start QEMU!\"";
    stream << "\n";
    stream << indent_str;
    stream << "    exit 1";
    stream << "\n";
    stream << indent_str;
    stream << "  fi";
    stream << "\n";
    stream << indent_str;
    stream << "}";
    stream << "\n";
    stream << indent_str;
    stream << "\n";
    stream << indent_str;
    stream << "# Function to build the required binaries";
    stream << "\n";
    stream << indent_str;
    stream << "build_binaries() {";
    stream << "\n";
    stream << indent_str;
    stream << "  echo \"[+] Building binaries...\"";
    stream << "\n";
    stream << indent_str;
    indent = 2;
    stream << "  ";
    indent = 0;
    stream << "\n";
    stream << indent_str;
    stream << "  if [ ! -f \"ta_server.c\" ]; then";
    stream << "\n";
    stream << indent_str;
    stream << "    echo \"[!] 'ta_server.c' file not found!\"";
    stream << "\n";
    stream << indent_str;
    stream << "    exit 1";
    stream << "\n";
    stream << indent_str;
    stream << "  fi";
    stream << "\n";
    stream << indent_str;
    indent = 2;
    stream << "  ";
    indent = 0;
    stream << "\n";
    stream << indent_str;
    stream << "  gcc ta_server.c -o ta_server";
    stream << "\n";
    stream << indent_str;
    stream << "  if [ $? -ne 0 ]; then";
    stream << "\n";
    stream << indent_str;
    stream << "    echo \"[!] Failed to compile ta_server.c!\"";
    stream << "\n";
    stream << indent_str;
    stream << "    exit 1";
    stream << "\n";
    stream << indent_str;
    stream << "  fi";
    stream << "\n";
    stream << indent_str;
    indent = 2;
    stream << "  ";
    indent = 0;
    stream << "\n";
    stream << indent_str;
    stream << "  gcc ";
    stream << taname;
    stream << ".c -o ";
    stream << taname;
    stream << " -lm";
    stream << "\n";
    stream << indent_str;
    stream << "  if [ $? -ne 0 ]; then";
    stream << "\n";
    stream << indent_str;
    stream << "    echo \"[!] Failed to compile ";
    stream << taname;
    stream << ".c!\"";
    stream << "\n";
    stream << indent_str;
    stream << "    exit 1";
    stream << "\n";
    stream << indent_str;
    stream << "  fi";
    stream << "\n";
    stream << indent_str;
    stream << "}";
    stream << "\n";
    stream << indent_str;
    stream << "\n";
    stream << indent_str;
    stream << "# Execute all steps in order if no argument is provided";
    stream << "\n";
    stream << indent_str;
    stream << "if [ $# -eq 0 ]; then";
    stream << "\n";
    stream << indent_str;
    stream << "  echo \"[+] No arguments provided. Running all steps...\"";
    stream << "\n";
    stream << indent_str;
    stream << "  build_binaries";
    stream << "\n";
    stream << indent_str;
    stream << "  setup_image";
    stream << "\n";
    stream << indent_str;
    stream << "  upload_files \"${PWD}/";
    stream << taname;
    stream << "\" \"/root\"";
    stream << "\n";
    stream << indent_str;
    stream << "  run_sev";
    stream << "\n";
    stream << indent_str;
    stream << "else";
    stream << "\n";
    stream << indent_str;
    stream << "  case \"$1\" in";
    stream << "\n";
    stream << indent_str;
    stream << "    image)";
    stream << "\n";
    stream << indent_str;
    stream << "      setup_image";
    stream << "\n";
    stream << indent_str;
    stream << "      ;;";
    stream << "\n";
    stream << indent_str;
    stream << "    upload)";
    stream << "\n";
    stream << indent_str;
    stream << "      if [ $# -lt 3 ]; then";
    stream << "\n";
    stream << indent_str;
    stream << "        echo \"[!] Usage: $0 upload <file> <path>\"";
    stream << "\n";
    stream << indent_str;
    stream << "        exit 1";
    stream << "\n";
    stream << indent_str;
    stream << "      fi";
    stream << "\n";
    stream << indent_str;
    stream << "      upload_files \"$2\" \"$3\"";
    stream << "\n";
    stream << indent_str;
    stream << "      ;;";
    stream << "\n";
    stream << indent_str;
    stream << "    run)";
    stream << "\n";
    stream << indent_str;
    stream << "      run_sev";
    stream << "\n";
    stream << indent_str;
    stream << "      ;;";
    stream << "\n";
    stream << indent_str;
    stream << "    build)";
    stream << "\n";
    stream << indent_str;
    stream << "      build_binaries";
    stream << "\n";
    stream << indent_str;
    stream << "      ;;";
    stream << "\n";
    stream << indent_str;
    stream << "    *)";
    stream << "\n";
    stream << indent_str;
    stream << "      echo \"[!] Invalid argument. Usage: $0 {image|upload|run|build} or no argument to execute all\"";
    stream << "\n";
    stream << indent_str;
    stream << "      exit 1";
    stream << "\n";
    stream << indent_str;
    stream << "      ;;";
    stream << "\n";
    stream << indent_str;
    stream << "  esac";
    stream << "\n";
    stream << indent_str;
    stream << "fi";
    stream << "\n";
    stream << indent_str;
    stream << "\n";
    stream << indent_str;
  }
};

#endif // TD_SETUP_GEN_CLASS_H
